// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb_req/req.proto

package pb_req

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestClient is the client API for Request service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestClient interface {
	NewChatRequest(ctx context.Context, in *NewChatRequestReq, opts ...grpc.CallOption) (*NewChatRequestResp, error)
	ChatRequestList(ctx context.Context, in *ChatRequestListReq, opts ...grpc.CallOption) (*ChatRequestListResp, error)
	ChatRequestHandler(ctx context.Context, in *ChatRequestHandlerReq, opts ...grpc.CallOption) (*ChatRequestHandlerResp, error)
}

type requestClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestClient(cc grpc.ClientConnInterface) RequestClient {
	return &requestClient{cc}
}

func (c *requestClient) NewChatRequest(ctx context.Context, in *NewChatRequestReq, opts ...grpc.CallOption) (*NewChatRequestResp, error) {
	out := new(NewChatRequestResp)
	err := c.cc.Invoke(ctx, "/pb_req.Request/NewChatRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) ChatRequestList(ctx context.Context, in *ChatRequestListReq, opts ...grpc.CallOption) (*ChatRequestListResp, error) {
	out := new(ChatRequestListResp)
	err := c.cc.Invoke(ctx, "/pb_req.Request/ChatRequestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) ChatRequestHandler(ctx context.Context, in *ChatRequestHandlerReq, opts ...grpc.CallOption) (*ChatRequestHandlerResp, error) {
	out := new(ChatRequestHandlerResp)
	err := c.cc.Invoke(ctx, "/pb_req.Request/ChatRequestHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServer is the server API for Request service.
// All implementations must embed UnimplementedRequestServer
// for forward compatibility
type RequestServer interface {
	NewChatRequest(context.Context, *NewChatRequestReq) (*NewChatRequestResp, error)
	ChatRequestList(context.Context, *ChatRequestListReq) (*ChatRequestListResp, error)
	ChatRequestHandler(context.Context, *ChatRequestHandlerReq) (*ChatRequestHandlerResp, error)
	mustEmbedUnimplementedRequestServer()
}

// UnimplementedRequestServer must be embedded to have forward compatible implementations.
type UnimplementedRequestServer struct {
}

func (UnimplementedRequestServer) NewChatRequest(context.Context, *NewChatRequestReq) (*NewChatRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChatRequest not implemented")
}
func (UnimplementedRequestServer) ChatRequestList(context.Context, *ChatRequestListReq) (*ChatRequestListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatRequestList not implemented")
}
func (UnimplementedRequestServer) ChatRequestHandler(context.Context, *ChatRequestHandlerReq) (*ChatRequestHandlerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatRequestHandler not implemented")
}
func (UnimplementedRequestServer) mustEmbedUnimplementedRequestServer() {}

// UnsafeRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServer will
// result in compilation errors.
type UnsafeRequestServer interface {
	mustEmbedUnimplementedRequestServer()
}

func RegisterRequestServer(s grpc.ServiceRegistrar, srv RequestServer) {
	s.RegisterService(&Request_ServiceDesc, srv)
}

func _Request_NewChatRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).NewChatRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_req.Request/NewChatRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).NewChatRequest(ctx, req.(*NewChatRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_ChatRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequestListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).ChatRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_req.Request/ChatRequestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).ChatRequestList(ctx, req.(*ChatRequestListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_ChatRequestHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequestHandlerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).ChatRequestHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_req.Request/ChatRequestHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).ChatRequestHandler(ctx, req.(*ChatRequestHandlerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Request_ServiceDesc is the grpc.ServiceDesc for Request service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Request_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_req.Request",
	HandlerType: (*RequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewChatRequest",
			Handler:    _Request_NewChatRequest_Handler,
		},
		{
			MethodName: "ChatRequestList",
			Handler:    _Request_ChatRequestList_Handler,
		},
		{
			MethodName: "ChatRequestHandler",
			Handler:    _Request_ChatRequestHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_req/req.proto",
}

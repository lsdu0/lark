// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb_link/link.proto

package pb_link

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkClient is the client API for Link service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkClient interface {
	UserOnline(ctx context.Context, in *UserOnlineReq, opts ...grpc.CallOption) (*UserOnlineResp, error)
	UserOffline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error)
}

type linkClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkClient(cc grpc.ClientConnInterface) LinkClient {
	return &linkClient{cc}
}

func (c *linkClient) UserOnline(ctx context.Context, in *UserOnlineReq, opts ...grpc.CallOption) (*UserOnlineResp, error) {
	out := new(UserOnlineResp)
	err := c.cc.Invoke(ctx, "/pb_link.Link/UserOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkClient) UserOffline(ctx context.Context, in *UserOfflineReq, opts ...grpc.CallOption) (*UserOfflineResp, error) {
	out := new(UserOfflineResp)
	err := c.cc.Invoke(ctx, "/pb_link.Link/UserOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkServer is the server API for Link service.
// All implementations must embed UnimplementedLinkServer
// for forward compatibility
type LinkServer interface {
	UserOnline(context.Context, *UserOnlineReq) (*UserOnlineResp, error)
	UserOffline(context.Context, *UserOfflineReq) (*UserOfflineResp, error)
	mustEmbedUnimplementedLinkServer()
}

// UnimplementedLinkServer must be embedded to have forward compatible implementations.
type UnimplementedLinkServer struct {
}

func (UnimplementedLinkServer) UserOnline(context.Context, *UserOnlineReq) (*UserOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOnline not implemented")
}
func (UnimplementedLinkServer) UserOffline(context.Context, *UserOfflineReq) (*UserOfflineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOffline not implemented")
}
func (UnimplementedLinkServer) mustEmbedUnimplementedLinkServer() {}

// UnsafeLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkServer will
// result in compilation errors.
type UnsafeLinkServer interface {
	mustEmbedUnimplementedLinkServer()
}

func RegisterLinkServer(s grpc.ServiceRegistrar, srv LinkServer) {
	s.RegisterService(&Link_ServiceDesc, srv)
}

func _Link_UserOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServer).UserOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_link.Link/UserOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServer).UserOnline(ctx, req.(*UserOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Link_UserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkServer).UserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_link.Link/UserOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkServer).UserOffline(ctx, req.(*UserOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Link_ServiceDesc is the grpc.ServiceDesc for Link service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Link_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_link.Link",
	HandlerType: (*LinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserOnline",
			Handler:    _Link_UserOnline_Handler,
		},
		{
			MethodName: "UserOffline",
			Handler:    _Link_UserOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_link/link.proto",
}
